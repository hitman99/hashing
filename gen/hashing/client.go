// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing client
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package hashing

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "hashing" service client.
type Client struct {
	Sha256Endpoint goa.Endpoint
	Sha512Endpoint goa.Endpoint
	Md5Endpoint    goa.Endpoint
	Sha1Endpoint   goa.Endpoint
	Sha384Endpoint goa.Endpoint
}

// NewClient initializes a "hashing" service client given the endpoints.
func NewClient(sha256, sha512, md5, sha1, sha384 goa.Endpoint) *Client {
	return &Client{
		Sha256Endpoint: sha256,
		Sha512Endpoint: sha512,
		Md5Endpoint:    md5,
		Sha1Endpoint:   sha1,
		Sha384Endpoint: sha384,
	}
}

// Sha256 calls the "sha256" endpoint of the "hashing" service.
func (c *Client) Sha256(ctx context.Context, p *Sha256Payload) (res *Hashingresult, err error) {
	var ires interface{}
	ires, err = c.Sha256Endpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Hashingresult), nil
}

// Sha512 calls the "sha512" endpoint of the "hashing" service.
func (c *Client) Sha512(ctx context.Context, p *Sha512Payload) (res *Hashingresult, err error) {
	var ires interface{}
	ires, err = c.Sha512Endpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Hashingresult), nil
}

// Md5 calls the "md5" endpoint of the "hashing" service.
func (c *Client) Md5(ctx context.Context, p *Md5Payload) (res *Hashingresult, err error) {
	var ires interface{}
	ires, err = c.Md5Endpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Hashingresult), nil
}

// Sha1 calls the "sha1" endpoint of the "hashing" service.
func (c *Client) Sha1(ctx context.Context, p *Sha1Payload) (res *Hashingresult, err error) {
	var ires interface{}
	ires, err = c.Sha1Endpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Hashingresult), nil
}

// Sha384 calls the "sha384" endpoint of the "hashing" service.
func (c *Client) Sha384(ctx context.Context, p *Sha384Payload) (res *Hashingresult, err error) {
	var ires interface{}
	ires, err = c.Sha384Endpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Hashingresult), nil
}
