// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing service
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package hashing

import (
	"context"

	hashingviews "github.com/hitman99/hashing/gen/hashing/views"
)

// The hashing service performs hashing operations.
type Service interface {
	// Sha256 implements sha256.
	Sha256(context.Context, *Sha256Payload) (res *Hashingresult, err error)
	// Sha512 implements sha512.
	Sha512(context.Context, *Sha512Payload) (res *Hashingresult, err error)
	// Md5 implements md5.
	Md5(context.Context, *Md5Payload) (res *Hashingresult, err error)
	// Sha1 implements sha1.
	Sha1(context.Context, *Sha1Payload) (res *Hashingresult, err error)
	// Sha384 implements sha384.
	Sha384(context.Context, *Sha384Payload) (res *Hashingresult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "hashing"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"sha256", "sha512", "md5", "sha1", "sha384"}

// Sha256Payload is the payload type of the hashing service sha256 method.
type Sha256Payload struct {
	// String to hash
	String string
}

// Hashingresult is the result type of the hashing service sha256 method.
type Hashingresult struct {
	// Hashing algorithm
	Type *string
	// Hash string in hex format
	Hash *string
}

// Sha512Payload is the payload type of the hashing service sha512 method.
type Sha512Payload struct {
	// String to hash
	String string
}

// Md5Payload is the payload type of the hashing service md5 method.
type Md5Payload struct {
	// String to hash
	String string
}

// Sha1Payload is the payload type of the hashing service sha1 method.
type Sha1Payload struct {
	// String to hash
	String string
}

// Sha384Payload is the payload type of the hashing service sha384 method.
type Sha384Payload struct {
	// String to hash
	String string
}

// NewHashingresult initializes result type Hashingresult from viewed result
// type Hashingresult.
func NewHashingresult(vres *hashingviews.Hashingresult) *Hashingresult {
	var res *Hashingresult
	switch vres.View {
	case "default", "":
		res = newHashingresult(vres.Projected)
	}
	return res
}

// NewViewedHashingresult initializes viewed result type Hashingresult from
// result type Hashingresult using the given view.
func NewViewedHashingresult(res *Hashingresult, view string) *hashingviews.Hashingresult {
	var vres *hashingviews.Hashingresult
	switch view {
	case "default", "":
		p := newHashingresultView(res)
		vres = &hashingviews.Hashingresult{p, "default"}
	}
	return vres
}

// newHashingresult converts projected type Hashingresult to service type
// Hashingresult.
func newHashingresult(vres *hashingviews.HashingresultView) *Hashingresult {
	res := &Hashingresult{
		Type: vres.Type,
		Hash: vres.Hash,
	}
	return res
}

// newHashingresultView projects result type Hashingresult to projected type
// HashingresultView using the "default" view.
func newHashingresultView(res *Hashingresult) *hashingviews.HashingresultView {
	vres := &hashingviews.HashingresultView{
		Type: res.Type,
		Hash: res.Hash,
	}
	return vres
}
