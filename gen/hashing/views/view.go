// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing views
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Hashingresult is the viewed result type that is projected based on a view.
type Hashingresult struct {
	// Type to project
	Projected *HashingresultView
	// View to render
	View string
}

// HashingresultView is a type that runs validations on a projected type.
type HashingresultView struct {
	// Hashing algorithm
	Type *string
	// Hash string in hex format
	Hash *string
}

var (
	// HashingresultMap is a map of attribute names in result type Hashingresult
	// indexed by view name.
	HashingresultMap = map[string][]string{
		"default": []string{
			"type",
			"hash",
		},
	}
)

// ValidateHashingresult runs the validations defined on the viewed result type
// Hashingresult.
func ValidateHashingresult(result *Hashingresult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateHashingresultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateHashingresultView runs the validations defined on HashingresultView
// using the "default" view.
func ValidateHashingresultView(result *HashingresultView) (err error) {

	return
}
