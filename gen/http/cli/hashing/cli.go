// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing HTTP client CLI support package
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	hashingc "github.com/hitman99/hashing/gen/http/hashing/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `hashing (sha256|sha512|md5|sha1|sha384)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` hashing sha256 --string "Ut dolores fugiat dolores ipsum eos."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		hashingFlags = flag.NewFlagSet("hashing", flag.ContinueOnError)

		hashingSha256Flags      = flag.NewFlagSet("sha256", flag.ExitOnError)
		hashingSha256StringFlag = hashingSha256Flags.String("string", "REQUIRED", "String to hash")

		hashingSha512Flags      = flag.NewFlagSet("sha512", flag.ExitOnError)
		hashingSha512StringFlag = hashingSha512Flags.String("string", "REQUIRED", "String to hash")

		hashingMd5Flags      = flag.NewFlagSet("md5", flag.ExitOnError)
		hashingMd5StringFlag = hashingMd5Flags.String("string", "REQUIRED", "String to hash")

		hashingSha1Flags      = flag.NewFlagSet("sha1", flag.ExitOnError)
		hashingSha1StringFlag = hashingSha1Flags.String("string", "REQUIRED", "String to hash")

		hashingSha384Flags      = flag.NewFlagSet("sha384", flag.ExitOnError)
		hashingSha384StringFlag = hashingSha384Flags.String("string", "REQUIRED", "String to hash")
	)
	hashingFlags.Usage = hashingUsage
	hashingSha256Flags.Usage = hashingSha256Usage
	hashingSha512Flags.Usage = hashingSha512Usage
	hashingMd5Flags.Usage = hashingMd5Usage
	hashingSha1Flags.Usage = hashingSha1Usage
	hashingSha384Flags.Usage = hashingSha384Usage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "hashing":
			svcf = hashingFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "hashing":
			switch epn {
			case "sha256":
				epf = hashingSha256Flags

			case "sha512":
				epf = hashingSha512Flags

			case "md5":
				epf = hashingMd5Flags

			case "sha1":
				epf = hashingSha1Flags

			case "sha384":
				epf = hashingSha384Flags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "hashing":
			c := hashingc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "sha256":
				endpoint = c.Sha256()
				data, err = hashingc.BuildSha256Payload(*hashingSha256StringFlag)
			case "sha512":
				endpoint = c.Sha512()
				data, err = hashingc.BuildSha512Payload(*hashingSha512StringFlag)
			case "md5":
				endpoint = c.Md5()
				data, err = hashingc.BuildMd5Payload(*hashingMd5StringFlag)
			case "sha1":
				endpoint = c.Sha1()
				data, err = hashingc.BuildSha1Payload(*hashingSha1StringFlag)
			case "sha384":
				endpoint = c.Sha384()
				data, err = hashingc.BuildSha384Payload(*hashingSha384StringFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// hashingUsage displays the usage of the hashing command and its subcommands.
func hashingUsage() {
	fmt.Fprintf(os.Stderr, `The hashing service performs hashing operations.
Usage:
    %s [globalflags] hashing COMMAND [flags]

COMMAND:
    sha256: Sha256 implements sha256.
    sha512: Sha512 implements sha512.
    md5: Md5 implements md5.
    sha1: Sha1 implements sha1.
    sha384: Sha384 implements sha384.

Additional help:
    %s hashing COMMAND --help
`, os.Args[0], os.Args[0])
}
func hashingSha256Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hashing sha256 -string STRING

Sha256 implements sha256.
    -string STRING: String to hash

Example:
    `+os.Args[0]+` hashing sha256 --string "Ut dolores fugiat dolores ipsum eos."
`, os.Args[0])
}

func hashingSha512Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hashing sha512 -string STRING

Sha512 implements sha512.
    -string STRING: String to hash

Example:
    `+os.Args[0]+` hashing sha512 --string "Omnis autem ea et."
`, os.Args[0])
}

func hashingMd5Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hashing md5 -string STRING

Md5 implements md5.
    -string STRING: String to hash

Example:
    `+os.Args[0]+` hashing md5 --string "Amet dicta nemo."
`, os.Args[0])
}

func hashingSha1Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hashing sha1 -string STRING

Sha1 implements sha1.
    -string STRING: String to hash

Example:
    `+os.Args[0]+` hashing sha1 --string "Incidunt voluptas minus incidunt non porro."
`, os.Args[0])
}

func hashingSha384Usage() {
	fmt.Fprintf(os.Stderr, `%s [flags] hashing sha384 -string STRING

Sha384 implements sha384.
    -string STRING: String to hash

Example:
    `+os.Args[0]+` hashing sha384 --string "Pariatur vel."
`, os.Args[0])
}
