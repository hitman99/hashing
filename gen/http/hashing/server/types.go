// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing HTTP server types
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package server

import (
	hashing "github.com/hitman99/hashing/gen/hashing"
	hashingviews "github.com/hitman99/hashing/gen/hashing/views"
)

// Sha256ResponseBody is the type of the "hashing" service "sha256" endpoint
// HTTP response body.
type Sha256ResponseBody struct {
	// Hashing algorithm
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hash string in hex format
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// Sha512ResponseBody is the type of the "hashing" service "sha512" endpoint
// HTTP response body.
type Sha512ResponseBody struct {
	// Hashing algorithm
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hash string in hex format
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// Md5ResponseBody is the type of the "hashing" service "md5" endpoint HTTP
// response body.
type Md5ResponseBody struct {
	// Hashing algorithm
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hash string in hex format
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// Sha1ResponseBody is the type of the "hashing" service "sha1" endpoint HTTP
// response body.
type Sha1ResponseBody struct {
	// Hashing algorithm
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hash string in hex format
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// Sha384ResponseBody is the type of the "hashing" service "sha384" endpoint
// HTTP response body.
type Sha384ResponseBody struct {
	// Hashing algorithm
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// Hash string in hex format
	Hash *string `form:"hash,omitempty" json:"hash,omitempty" xml:"hash,omitempty"`
}

// NewSha256ResponseBody builds the HTTP response body from the result of the
// "sha256" endpoint of the "hashing" service.
func NewSha256ResponseBody(res *hashingviews.HashingresultView) *Sha256ResponseBody {
	body := &Sha256ResponseBody{
		Type: res.Type,
		Hash: res.Hash,
	}
	return body
}

// NewSha512ResponseBody builds the HTTP response body from the result of the
// "sha512" endpoint of the "hashing" service.
func NewSha512ResponseBody(res *hashingviews.HashingresultView) *Sha512ResponseBody {
	body := &Sha512ResponseBody{
		Type: res.Type,
		Hash: res.Hash,
	}
	return body
}

// NewMd5ResponseBody builds the HTTP response body from the result of the
// "md5" endpoint of the "hashing" service.
func NewMd5ResponseBody(res *hashingviews.HashingresultView) *Md5ResponseBody {
	body := &Md5ResponseBody{
		Type: res.Type,
		Hash: res.Hash,
	}
	return body
}

// NewSha1ResponseBody builds the HTTP response body from the result of the
// "sha1" endpoint of the "hashing" service.
func NewSha1ResponseBody(res *hashingviews.HashingresultView) *Sha1ResponseBody {
	body := &Sha1ResponseBody{
		Type: res.Type,
		Hash: res.Hash,
	}
	return body
}

// NewSha384ResponseBody builds the HTTP response body from the result of the
// "sha384" endpoint of the "hashing" service.
func NewSha384ResponseBody(res *hashingviews.HashingresultView) *Sha384ResponseBody {
	body := &Sha384ResponseBody{
		Type: res.Type,
		Hash: res.Hash,
	}
	return body
}

// NewSha256Payload builds a hashing service sha256 endpoint payload.
func NewSha256Payload(string_ string) *hashing.Sha256Payload {
	return &hashing.Sha256Payload{
		String: string_,
	}
}

// NewSha512Payload builds a hashing service sha512 endpoint payload.
func NewSha512Payload(string_ string) *hashing.Sha512Payload {
	return &hashing.Sha512Payload{
		String: string_,
	}
}

// NewMd5Payload builds a hashing service md5 endpoint payload.
func NewMd5Payload(string_ string) *hashing.Md5Payload {
	return &hashing.Md5Payload{
		String: string_,
	}
}

// NewSha1Payload builds a hashing service sha1 endpoint payload.
func NewSha1Payload(string_ string) *hashing.Sha1Payload {
	return &hashing.Sha1Payload{
		String: string_,
	}
}

// NewSha384Payload builds a hashing service sha384 endpoint payload.
func NewSha384Payload(string_ string) *hashing.Sha384Payload {
	return &hashing.Sha384Payload{
		String: string_,
	}
}
