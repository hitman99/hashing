// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing HTTP server
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package server

import (
	"context"
	"net/http"

	hashing "github.com/hitman99/hashing/gen/hashing"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the hashing service endpoint HTTP handlers.
type Server struct {
	Mounts []*MountPoint
	Sha256 http.Handler
	Sha512 http.Handler
	Md5    http.Handler
	Sha1   http.Handler
	Sha384 http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the hashing service endpoints.
func New(
	e *hashing.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"Sha256", "GET", "/sha256/{string}"},
			{"Sha512", "GET", "/sha512/{string}"},
			{"Md5", "GET", "/md5/{string}"},
			{"Sha1", "GET", "/sha1/{string}"},
			{"Sha384", "GET", "/sha384/{string}"},
			{"./gen/http/openapi.json", "GET", "/openapi.json"},
		},
		Sha256: NewSha256Handler(e.Sha256, mux, dec, enc, eh),
		Sha512: NewSha512Handler(e.Sha512, mux, dec, enc, eh),
		Md5:    NewMd5Handler(e.Md5, mux, dec, enc, eh),
		Sha1:   NewSha1Handler(e.Sha1, mux, dec, enc, eh),
		Sha384: NewSha384Handler(e.Sha384, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "hashing" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Sha256 = m(s.Sha256)
	s.Sha512 = m(s.Sha512)
	s.Md5 = m(s.Md5)
	s.Sha1 = m(s.Sha1)
	s.Sha384 = m(s.Sha384)
}

// Mount configures the mux to serve the hashing endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSha256Handler(mux, h.Sha256)
	MountSha512Handler(mux, h.Sha512)
	MountMd5Handler(mux, h.Md5)
	MountSha1Handler(mux, h.Sha1)
	MountSha384Handler(mux, h.Sha384)
	MountGenHTTPOpenapiJSON(mux, http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./gen/http/openapi.json")
	}))
}

// MountSha256Handler configures the mux to serve the "hashing" service
// "sha256" endpoint.
func MountSha256Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sha256/{string}", f)
}

// NewSha256Handler creates a HTTP handler which loads the HTTP request and
// calls the "hashing" service "sha256" endpoint.
func NewSha256Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeSha256Request(mux, dec)
		encodeResponse = EncodeSha256Response(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sha256")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hashing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountSha512Handler configures the mux to serve the "hashing" service
// "sha512" endpoint.
func MountSha512Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sha512/{string}", f)
}

// NewSha512Handler creates a HTTP handler which loads the HTTP request and
// calls the "hashing" service "sha512" endpoint.
func NewSha512Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeSha512Request(mux, dec)
		encodeResponse = EncodeSha512Response(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sha512")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hashing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountMd5Handler configures the mux to serve the "hashing" service "md5"
// endpoint.
func MountMd5Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/md5/{string}", f)
}

// NewMd5Handler creates a HTTP handler which loads the HTTP request and calls
// the "hashing" service "md5" endpoint.
func NewMd5Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeMd5Request(mux, dec)
		encodeResponse = EncodeMd5Response(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "md5")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hashing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountSha1Handler configures the mux to serve the "hashing" service "sha1"
// endpoint.
func MountSha1Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sha1/{string}", f)
}

// NewSha1Handler creates a HTTP handler which loads the HTTP request and calls
// the "hashing" service "sha1" endpoint.
func NewSha1Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeSha1Request(mux, dec)
		encodeResponse = EncodeSha1Response(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sha1")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hashing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountSha384Handler configures the mux to serve the "hashing" service
// "sha384" endpoint.
func MountSha384Handler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sha384/{string}", f)
}

// NewSha384Handler creates a HTTP handler which loads the HTTP request and
// calls the "hashing" service "sha384" endpoint.
func NewSha384Handler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeSha384Request(mux, dec)
		encodeResponse = EncodeSha384Response(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sha384")
		ctx = context.WithValue(ctx, goa.ServiceKey, "hashing")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGenHTTPOpenapiJSON configures the mux to serve GET request made to
// "/openapi.json".
func MountGenHTTPOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/openapi.json", h.ServeHTTP)
}
