// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	hashing "github.com/hitman99/hashing/gen/hashing"
	hashingviews "github.com/hitman99/hashing/gen/hashing/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildSha256Request instantiates a HTTP request object with method and path
// set to call the "hashing" service "sha256" endpoint
func (c *Client) BuildSha256Request(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		string_ string
	)
	{
		p, ok := v.(*hashing.Sha256Payload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hashing", "sha256", "*hashing.Sha256Payload", v)
		}
		string_ = p.String
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Sha256HashingPath(string_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hashing", "sha256", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSha256Response returns a decoder for responses returned by the hashing
// sha256 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSha256Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body Sha256ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hashing", "sha256", err)
			}
			p := NewSha256HashingresultOK(&body)
			view := "default"
			vres := &hashingviews.Hashingresult{p, view}
			if err = hashingviews.ValidateHashingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("hashing", "sha256", err)
			}
			res := hashing.NewHashingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hashing", "sha256", resp.StatusCode, string(body))
		}
	}
}

// BuildSha512Request instantiates a HTTP request object with method and path
// set to call the "hashing" service "sha512" endpoint
func (c *Client) BuildSha512Request(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		string_ string
	)
	{
		p, ok := v.(*hashing.Sha512Payload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hashing", "sha512", "*hashing.Sha512Payload", v)
		}
		string_ = p.String
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Sha512HashingPath(string_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hashing", "sha512", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSha512Response returns a decoder for responses returned by the hashing
// sha512 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSha512Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body Sha512ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hashing", "sha512", err)
			}
			p := NewSha512HashingresultOK(&body)
			view := "default"
			vres := &hashingviews.Hashingresult{p, view}
			if err = hashingviews.ValidateHashingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("hashing", "sha512", err)
			}
			res := hashing.NewHashingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hashing", "sha512", resp.StatusCode, string(body))
		}
	}
}

// BuildMd5Request instantiates a HTTP request object with method and path set
// to call the "hashing" service "md5" endpoint
func (c *Client) BuildMd5Request(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		string_ string
	)
	{
		p, ok := v.(*hashing.Md5Payload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hashing", "md5", "*hashing.Md5Payload", v)
		}
		string_ = p.String
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Md5HashingPath(string_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hashing", "md5", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMd5Response returns a decoder for responses returned by the hashing
// md5 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeMd5Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body Md5ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hashing", "md5", err)
			}
			p := NewMd5HashingresultOK(&body)
			view := "default"
			vres := &hashingviews.Hashingresult{p, view}
			if err = hashingviews.ValidateHashingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("hashing", "md5", err)
			}
			res := hashing.NewHashingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hashing", "md5", resp.StatusCode, string(body))
		}
	}
}

// BuildSha1Request instantiates a HTTP request object with method and path set
// to call the "hashing" service "sha1" endpoint
func (c *Client) BuildSha1Request(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		string_ string
	)
	{
		p, ok := v.(*hashing.Sha1Payload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hashing", "sha1", "*hashing.Sha1Payload", v)
		}
		string_ = p.String
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Sha1HashingPath(string_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hashing", "sha1", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSha1Response returns a decoder for responses returned by the hashing
// sha1 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSha1Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body Sha1ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hashing", "sha1", err)
			}
			p := NewSha1HashingresultOK(&body)
			view := "default"
			vres := &hashingviews.Hashingresult{p, view}
			if err = hashingviews.ValidateHashingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("hashing", "sha1", err)
			}
			res := hashing.NewHashingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hashing", "sha1", resp.StatusCode, string(body))
		}
	}
}

// BuildSha384Request instantiates a HTTP request object with method and path
// set to call the "hashing" service "sha384" endpoint
func (c *Client) BuildSha384Request(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		string_ string
	)
	{
		p, ok := v.(*hashing.Sha384Payload)
		if !ok {
			return nil, goahttp.ErrInvalidType("hashing", "sha384", "*hashing.Sha384Payload", v)
		}
		string_ = p.String
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: Sha384HashingPath(string_)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hashing", "sha384", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSha384Response returns a decoder for responses returned by the hashing
// sha384 endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeSha384Response(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body Sha384ResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hashing", "sha384", err)
			}
			p := NewSha384HashingresultOK(&body)
			view := "default"
			vres := &hashingviews.Hashingresult{p, view}
			if err = hashingviews.ValidateHashingresult(vres); err != nil {
				return nil, goahttp.ErrValidationError("hashing", "sha384", err)
			}
			res := hashing.NewHashingresult(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hashing", "sha384", resp.StatusCode, string(body))
		}
	}
}
