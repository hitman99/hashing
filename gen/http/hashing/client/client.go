// Code generated by goa v3.0.2, DO NOT EDIT.
//
// hashing client HTTP transport
//
// Command:
// $ goa gen github.com/hitman99/hashing/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the hashing service endpoint HTTP clients.
type Client struct {
	// Sha256 Doer is the HTTP client used to make requests to the sha256 endpoint.
	Sha256Doer goahttp.Doer

	// Sha512 Doer is the HTTP client used to make requests to the sha512 endpoint.
	Sha512Doer goahttp.Doer

	// Md5 Doer is the HTTP client used to make requests to the md5 endpoint.
	Md5Doer goahttp.Doer

	// Sha1 Doer is the HTTP client used to make requests to the sha1 endpoint.
	Sha1Doer goahttp.Doer

	// Sha384 Doer is the HTTP client used to make requests to the sha384 endpoint.
	Sha384Doer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the hashing service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		Sha256Doer:          doer,
		Sha512Doer:          doer,
		Md5Doer:             doer,
		Sha1Doer:            doer,
		Sha384Doer:          doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Sha256 returns an endpoint that makes HTTP requests to the hashing service
// sha256 server.
func (c *Client) Sha256() goa.Endpoint {
	var (
		decodeResponse = DecodeSha256Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSha256Request(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Sha256Doer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hashing", "sha256", err)
		}
		return decodeResponse(resp)
	}
}

// Sha512 returns an endpoint that makes HTTP requests to the hashing service
// sha512 server.
func (c *Client) Sha512() goa.Endpoint {
	var (
		decodeResponse = DecodeSha512Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSha512Request(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Sha512Doer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hashing", "sha512", err)
		}
		return decodeResponse(resp)
	}
}

// Md5 returns an endpoint that makes HTTP requests to the hashing service md5
// server.
func (c *Client) Md5() goa.Endpoint {
	var (
		decodeResponse = DecodeMd5Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMd5Request(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Md5Doer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hashing", "md5", err)
		}
		return decodeResponse(resp)
	}
}

// Sha1 returns an endpoint that makes HTTP requests to the hashing service
// sha1 server.
func (c *Client) Sha1() goa.Endpoint {
	var (
		decodeResponse = DecodeSha1Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSha1Request(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Sha1Doer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hashing", "sha1", err)
		}
		return decodeResponse(resp)
	}
}

// Sha384 returns an endpoint that makes HTTP requests to the hashing service
// sha384 server.
func (c *Client) Sha384() goa.Endpoint {
	var (
		decodeResponse = DecodeSha384Response(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSha384Request(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.Sha384Doer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("hashing", "sha384", err)
		}
		return decodeResponse(resp)
	}
}
